{
  "contractName": "DiamondCutFacet",
  "sourceName": "solc_0.7/diamond/facets/DiamondCutFacet.sol",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1329 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F931C1C EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x96A JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0x247 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57 PUSH2 0x285 JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0xFFFF AND DUP1 PUSH1 0x0 DUP1 PUSH1 0x8 DUP4 MOD GT ISZERO PUSH2 0x88 JUMPI POP PUSH1 0x8 DUP2 DIV PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH1 0x0 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x163 JUMPI PUSH2 0x156 DUP4 DUP4 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0xA4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xB6 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0xC4 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x948 JUMP JUMPDEST DUP14 DUP14 DUP7 DUP2 DUP2 LT PUSH2 0xD0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xE2 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0xF3 SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0xA3D JUMP JUMPDEST DUP15 DUP15 DUP8 DUP2 DUP2 LT PUSH2 0xFF JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x111 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0x11F SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x11A8 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2A9 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 ADD PUSH2 0x8B JUMP JUMPDEST POP DUP3 DUP3 EQ PUSH2 0x19C JUMPI PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0xFFFF DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x7 DUP3 AND ISZERO PUSH2 0x1BD JUMPI PUSH1 0x8 DUP3 DIV PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST PUSH32 0x8FAA70878671CCD212D20771B795C50AF8FD3FF6CF27F4BDE57E5D4DE0AEB673 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1F4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x23C DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x7D0 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x24F PUSH2 0x285 JUMP JUMPDEST PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x283 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B6 PUSH2 0x285 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 MLOAD GT PUSH2 0x2D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xD4C JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2E7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x416 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x313 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xE63 JUMP JUMPDEST PUSH2 0x335 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1280 PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x60 DUP2 SWAP1 SHR ISZERO PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP15 SWAP1 SHL AND DUP16 OR SWAP1 SSTORE PUSH1 0x7 DUP15 AND MUL SWAP1 DUP2 SHR SWAP2 DUP2 SHR NOT SWAP12 SWAP1 SWAP12 AND OR SWAP10 PUSH1 0xE0 DUP2 EQ ISZERO PUSH2 0x401 JUMPI PUSH1 0x8 DUP13 DIV PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP12 SWAP1 SWAP12 SSTORE JUMPDEST POP POP POP PUSH1 0x1 SWAP9 DUP10 ADD SWAP9 ADD PUSH2 0x338 JUMP JUMPDEST POP PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x424 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x57D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0x472 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12CC PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x48C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x60 DUP2 SWAP1 SHR ADDRESS DUP2 EQ ISZERO PUSH2 0x4DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x10EE JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x50C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x1034 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x532 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x114B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP11 SWAP1 SHL AND OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x475 JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x58B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x7AC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x1091 JUMP JUMPDEST PUSH1 0x8 DUP9 DIV PUSH1 0x0 NOT PUSH1 0x7 DUP11 AND ADD PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x79B JUMPI DUP10 PUSH2 0x5F4 JUMPI PUSH1 0x0 NOT SWAP1 SWAP3 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP10 POP SWAP2 PUSH1 0x7 SWAP2 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x606 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP11 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x60 DUP2 SWAP1 SHR PUSH2 0x650 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0x60 DUP2 SWAP1 SHR ADDRESS EQ ISZERO PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xF7A JUMP JUMPDEST PUSH1 0x20 DUP8 MUL DUP16 SWAP1 SHL SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP7 AND SWAP1 DUP4 AND EQ PUSH2 0x6CE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0xFFFF DUP2 AND PUSH1 0x8 DUP2 DIV SWAP5 POP PUSH1 0x8 DUP2 MOD PUSH1 0x20 MUL SWAP4 POP POP POP POP DUP6 DUP3 EQ PUSH2 0x735 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP5 SHR NOT SWAP1 SWAP2 AND SWAP1 DUP6 AND DUP4 SHR OR SWAP1 SSTORE PUSH2 0x76E JUMP JUMPDEST DUP1 DUP4 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SHR DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x0 SHL SWAP1 SHR NOT DUP15 AND OR SWAP13 POP JUMPDEST DUP5 PUSH2 0x789 JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE SWAP13 POP JUMPDEST POP POP PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0x5C7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SWAP8 POP PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xE06 JUMP JUMPDEST POP SWAP6 SWAP7 SWAP5 SWAP6 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x802 JUMPI DUP1 MLOAD ISZERO PUSH2 0x7FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xC35 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xF1D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x855 JUMPI PUSH2 0x855 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A4 PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x871 SWAP2 SWAP1 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x8F4 JUMPI DUP1 MLOAD ISZERO PUSH2 0x8DC JUMPI DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP2 SWAP1 PUSH2 0xC02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xC92 JUMP JUMPDEST POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP2 SWAP1 PUSH2 0xC02 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x959 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x963 DUP4 DUP4 PUSH2 0x91C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x981 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x998 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9AB JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9B9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 DUP11 DUP2 DUP3 DUP5 MUL DUP7 ADD ADD GT ISZERO PUSH2 0x9CD JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP5 ADD SWAP9 POP DUP2 SWAP8 POP PUSH2 0x9E1 DUP12 DUP3 DUP13 ADD PUSH2 0x91C JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0x9F6 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP11 ADD SWAP4 POP DUP11 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xA09 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP2 POP DUP3 DUP3 GT ISZERO PUSH2 0xA19 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xA29 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP SWAP1 SWAP5 ADD SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA4E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x963 DUP4 DUP4 PUSH2 0x939 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xAA7 JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP1 DUP3 EQ PUSH2 0xA94 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 MSTORE POP SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA74 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0xAE6 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAFC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 PUSH1 0x80 DUP1 DUP6 ADD SWAP1 DUP3 DUP11 MUL DUP7 ADD ADD DUP11 DUP6 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0xBD2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP9 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH1 0x5E NOT DUP15 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xB67 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP14 ADD DUP6 DUP2 ADD PUSH2 0xB7F DUP6 PUSH2 0xB7A DUP4 DUP6 PUSH2 0x91C JUMP JUMPDEST PUSH2 0xA58 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD PUSH2 0xB8E DUP2 DUP5 PUSH2 0x939 JUMP JUMPDEST SWAP3 POP PUSH2 0xB9C DUP10 DUP9 ADD DUP5 PUSH2 0xADC JUMP JUMPDEST PUSH2 0xBA6 DUP2 DUP6 PUSH2 0x120B JUMP JUMPDEST SWAP5 POP SWAP3 POP POP DUP9 DUP2 DUP8 ADD MSTORE POP PUSH2 0xBBE DUP9 DUP7 ADD DUP4 DUP4 PUSH2 0xA65 JUMP JUMPDEST SWAP6 DUP8 ADD SWAP6 SWAP5 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB25 JUMP JUMPDEST POP POP PUSH2 0xBE0 DUP4 DUP8 ADD DUP11 PUSH2 0xA58 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0xBF3 DUP2 DUP9 DUP11 PUSH2 0xAB2 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC21 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3C SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205F696E6974206973206164647265737328 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x3029206275745F63616C6C64617461206973206E6F7420656D70747900000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205F696E69742066756E6374696F6E207265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7665727465640000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E643A204D75737420626520636F6E7472616374206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A204E6F2073656C6563746F727320696E2066 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6163657420746F20637574000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x37 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E27742072656D6F76652066756E63 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x74696F6E207468617420646F65736E2774206578697374000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A20496E636F72726563742046616365744375 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x74416374696F6E00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A204164642066616365742063616E27742062 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6520616464726573732830290000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205265706C6163652066616365742063616E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2774206265206164647265737328302900000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3D SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205F63616C6C6461746120697320656D7074 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7920627574205F696E6974206973206E6F742061646472657373283029000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E27742072656D6F766520696D6D75 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7461626C652066756E6374696F6E000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x35 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774206164642066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E207468617420616C7265616479206578697374730000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774207265706C6163652066756E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6374696F6E20776974682073616D652066756E6374696F6E0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2052656D6F76652066616365742061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x657373206D757374206265206164647265737328302900000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774207265706C61636520696D6D PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x757461626C652066756E6374696F6E0000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774207265706C6163652066756E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6374696F6E207468617420646F65736E27742065786973740000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x11BE JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11D8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD SWAP3 POP DUP2 MUL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x11EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xAFC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1221 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x11EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x126E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1256 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8F4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A2041646420666163657420686173206E6F20636F PUSH5 0x654C696244 PUSH10 0x616D6F6E644375743A20 0x5F PUSH10 0x6E697420616464726573 PUSH20 0x20686173206E6F20636F64654C69624469616D6F PUSH15 0x644375743A205265706C6163652066 PUSH2 0x6365 PUSH21 0x20686173206E6F20636F6465A26469706673582212 KECCAK256 0xDB 0x1E PUSH18 0x1C2147E06208C3BFD2282A1BF1CB24EACB2C PUSH25 0x4A674207799A61238E9F64736F6C6343000701003300000000 ",
      "sourceMap": "483:1947:2:-:0;;;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F931C1C EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x96A JUMP JUMPDEST PUSH2 0x45 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4D PUSH2 0x247 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57 PUSH2 0x285 JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH2 0xFFFF AND DUP1 PUSH1 0x0 DUP1 PUSH1 0x8 DUP4 MOD GT ISZERO PUSH2 0x88 JUMPI POP PUSH1 0x8 DUP2 DIV PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST PUSH1 0x0 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x163 JUMPI PUSH2 0x156 DUP4 DUP4 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0xA4 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xB6 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0xC4 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x948 JUMP JUMPDEST DUP14 DUP14 DUP7 DUP2 DUP2 LT PUSH2 0xD0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0xE2 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0xF3 SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0xA3D JUMP JUMPDEST DUP15 DUP15 DUP8 DUP2 DUP2 LT PUSH2 0xFF JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x111 SWAP2 SWAP1 PUSH2 0x11F6 JUMP JUMPDEST PUSH2 0x11F SWAP1 PUSH1 0x40 DUP2 ADD SWAP1 PUSH2 0x11A8 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2A9 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 ADD PUSH2 0x8B JUMP JUMPDEST POP DUP3 DUP3 EQ PUSH2 0x19C JUMPI PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 AND PUSH2 0xFFFF DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x7 DUP3 AND ISZERO PUSH2 0x1BD JUMPI PUSH1 0x8 DUP3 DIV PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST PUSH32 0x8FAA70878671CCD212D20771B795C50AF8FD3FF6CF27F4BDE57E5D4DE0AEB673 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1F4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0x23C DUP8 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x7D0 SWAP3 POP POP POP JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x24F PUSH2 0x285 JUMP JUMPDEST PUSH1 0x4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x283 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xCEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH32 0xC8FCAD8DB84D3CC18B4C41D551EA0EE66DD599CDE068D998E57D5E09332C131C SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2B6 PUSH2 0x285 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 MLOAD GT PUSH2 0x2D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xD4C JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2E7 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x416 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x313 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xE63 JUMP JUMPDEST PUSH2 0x335 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1280 PUSH1 0x24 SWAP2 CODECOPY PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x60 DUP2 SWAP1 SHR ISZERO PUSH2 0x39A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xFD7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP8 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP15 SWAP1 SHL AND DUP16 OR SWAP1 SSTORE PUSH1 0x7 DUP15 AND MUL SWAP1 DUP2 SHR SWAP2 DUP2 SHR NOT SWAP12 SWAP1 SWAP12 AND OR SWAP10 PUSH1 0xE0 DUP2 EQ ISZERO PUSH2 0x401 JUMPI PUSH1 0x8 DUP13 DIV PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP7 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP12 SWAP1 SWAP12 SSTORE JUMPDEST POP POP POP PUSH1 0x1 SWAP9 DUP10 ADD SWAP9 ADD PUSH2 0x338 JUMP JUMPDEST POP PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x1 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x424 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x57D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x450 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0x472 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12CC PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x410 JUMPI PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x48C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP6 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x60 DUP2 SWAP1 SHR ADDRESS DUP2 EQ ISZERO PUSH2 0x4DA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x10EE JUMP JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x50C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x1034 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x532 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x114B JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 DUP11 SWAP1 SHL AND OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x475 JUMP JUMPDEST PUSH1 0x2 DUP6 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x58B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x7AC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0x1091 JUMP JUMPDEST PUSH1 0x8 DUP9 DIV PUSH1 0x0 NOT PUSH1 0x7 DUP11 AND ADD PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x79B JUMPI DUP10 PUSH2 0x5F4 JUMPI PUSH1 0x0 NOT SWAP1 SWAP3 ADD PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP6 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP10 POP SWAP2 PUSH1 0x7 SWAP2 POP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x606 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP2 DUP11 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0x60 DUP2 SWAP1 SHR PUSH2 0x650 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xDA9 JUMP JUMPDEST PUSH1 0x60 DUP2 SWAP1 SHR ADDRESS EQ ISZERO PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xF7A JUMP JUMPDEST PUSH1 0x20 DUP8 MUL DUP16 SWAP1 SHL SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP7 AND SWAP1 DUP4 AND EQ PUSH2 0x6CE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP11 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0xFFFF DUP2 AND PUSH1 0x8 DUP2 DIV SWAP5 POP PUSH1 0x8 DUP2 MOD PUSH1 0x20 MUL SWAP4 POP POP POP POP DUP6 DUP3 EQ PUSH2 0x735 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP1 DUP5 SHR NOT SWAP1 SWAP2 AND SWAP1 DUP6 AND DUP4 SHR OR SWAP1 SSTORE PUSH2 0x76E JUMP JUMPDEST DUP1 DUP4 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SHR DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0x0 SHL SWAP1 SHR NOT DUP15 AND OR SWAP13 POP JUMPDEST DUP5 PUSH2 0x789 JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 DUP9 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE SWAP13 POP JUMPDEST POP POP PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 POP PUSH1 0x1 ADD PUSH2 0x5C7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x8 SWAP1 SWAP3 MUL ADD ADD SWAP8 POP PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xE06 JUMP JUMPDEST POP SWAP6 SWAP7 SWAP5 SWAP6 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x802 JUMPI DUP1 MLOAD ISZERO PUSH2 0x7FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xC35 JUMP JUMPDEST PUSH2 0x8F7 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x823 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xF1D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x855 JUMPI PUSH2 0x855 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A4 PUSH1 0x28 SWAP2 CODECOPY PUSH2 0x8FB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x871 SWAP2 SWAP1 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x8F4 JUMPI DUP1 MLOAD ISZERO PUSH2 0x8DC JUMPI DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP2 SWAP1 PUSH2 0xC02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP1 PUSH2 0xC92 JUMP JUMPDEST POP POP JUMPDEST POP POP JUMP JUMPDEST DUP2 EXTCODESIZE DUP2 DUP2 PUSH2 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27A SWAP2 SWAP1 PUSH2 0xC02 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x959 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x963 DUP4 DUP4 PUSH2 0x91C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x981 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x998 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9AB JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x9B9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 DUP11 DUP2 DUP3 DUP5 MUL DUP7 ADD ADD GT ISZERO PUSH2 0x9CD JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP5 ADD SWAP9 POP DUP2 SWAP8 POP PUSH2 0x9E1 DUP12 DUP3 DUP13 ADD PUSH2 0x91C JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 0x9F6 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP11 ADD SWAP4 POP DUP11 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xA09 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP2 POP DUP3 DUP3 GT ISZERO PUSH2 0xA19 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 DUP2 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0xA29 JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP POP SWAP1 SWAP5 ADD SWAP4 POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA4E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x963 DUP4 DUP4 PUSH2 0x939 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP3 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xAA7 JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP1 DUP3 EQ PUSH2 0xA94 JUMPI DUP6 DUP7 REVERT JUMPDEST DUP9 MSTORE POP SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA74 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MSTORE DUP3 DUP3 PUSH1 0x20 DUP7 ADD CALLDATACOPY DUP1 PUSH1 0x20 DUP5 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP6 ADD ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0xAE6 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAFC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1253 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 PUSH1 0x80 DUP1 DUP6 ADD SWAP1 DUP3 DUP11 MUL DUP7 ADD ADD DUP11 DUP6 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0xBD2 JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 DUP9 DUP5 SUB ADD DUP5 MSTORE DUP2 CALLDATALOAD PUSH1 0x5E NOT DUP15 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xB67 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP14 ADD DUP6 DUP2 ADD PUSH2 0xB7F DUP6 PUSH2 0xB7A DUP4 DUP6 PUSH2 0x91C JUMP JUMPDEST PUSH2 0xA58 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD PUSH2 0xB8E DUP2 DUP5 PUSH2 0x939 JUMP JUMPDEST SWAP3 POP PUSH2 0xB9C DUP10 DUP9 ADD DUP5 PUSH2 0xADC JUMP JUMPDEST PUSH2 0xBA6 DUP2 DUP6 PUSH2 0x120B JUMP JUMPDEST SWAP5 POP SWAP3 POP POP DUP9 DUP2 DUP8 ADD MSTORE POP PUSH2 0xBBE DUP9 DUP7 ADD DUP4 DUP4 PUSH2 0xA65 JUMP JUMPDEST SWAP6 DUP8 ADD SWAP6 SWAP5 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB25 JUMP JUMPDEST POP POP PUSH2 0xBE0 DUP4 DUP8 ADD DUP11 PUSH2 0xA58 JUMP JUMPDEST DUP6 DUP2 SUB PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0xBF3 DUP2 DUP9 DUP11 PUSH2 0xAB2 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC21 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3C SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205F696E6974206973206164647265737328 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x3029206275745F63616C6C64617461206973206E6F7420656D70747900000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205F696E69742066756E6374696F6E207265 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7665727465640000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E643A204D75737420626520636F6E7472616374206F776E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6572000000000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A204E6F2073656C6563746F727320696E2066 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6163657420746F20637574000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x37 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E27742072656D6F76652066756E63 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x74696F6E207468617420646F65736E2774206578697374000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A20496E636F72726563742046616365744375 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x74416374696F6E00000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A204164642066616365742063616E27742062 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6520616464726573732830290000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205265706C6163652066616365742063616E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2774206265206164647265737328302900000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3D SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A205F63616C6C6461746120697320656D7074 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7920627574205F696E6974206973206E6F742061646472657373283029000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E27742072656D6F766520696D6D75 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7461626C652066756E6374696F6E000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x35 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774206164642066756E6374696F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E207468617420616C7265616479206578697374730000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774207265706C6163652066756E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6374696F6E20776974682073616D652066756E6374696F6E0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2052656D6F76652066616365742061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x657373206D757374206265206164647265737328302900000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774207265706C61636520696D6D PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x757461626C652066756E6374696F6E0000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4C69624469616D6F6E644375743A2043616E2774207265706C6163652066756E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6374696F6E207468617420646F65736E27742065786973740000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x11BE JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x11D8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 ADD SWAP3 POP DUP2 MUL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x11EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH1 0x5E NOT DUP4 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xAFC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1221 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP2 MUL CALLDATASIZE SUB DUP4 SGT ISZERO PUSH2 0x11EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x126E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1256 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8F4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP INVALID 0x4C PUSH10 0x624469616D6F6E644375 PUSH21 0x3A2041646420666163657420686173206E6F20636F PUSH5 0x654C696244 PUSH10 0x616D6F6E644375743A20 0x5F PUSH10 0x6E697420616464726573 PUSH20 0x20686173206E6F20636F64654C69624469616D6F PUSH15 0x644375743A205265706C6163652066 PUSH2 0x6365 PUSH21 0x20686173206E6F20636F6465A26469706673582212 KECCAK256 0xDB 0x1E PUSH18 0x1C2147E06208C3BFD2282A1BF1CB24EACB2C PUSH25 0x4A674207799A61238E9F64736F6C6343000701003300000000 ",
      "sourceMap": "483:1947:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;976:1452;;;;;;:::i;:::-;;:::i;:::-;;;1128:35;:33;:35::i;:::-;1173:36;1212:27;:25;:27::i;:::-;1281:16;;;;1173:66;;-1:-1:-1;1281:16:2;;;1249:29;;1463:1;1281:16;1447:17;:21;1443:139;;;-1:-1:-1;1569:1:2;1553:17;;1536:35;;;;:16;;;:35;;;;;;1443:139;1632:18;1627:406;1652:31;;;1627:406;;;1745:277;1804:13;1835:12;1865:11;;1877:10;1865:23;;;;;;;;;;;;;;;;;;:::i;:::-;:36;;;;;;;:::i;:::-;1919:11;;1931:10;1919:23;;;;;;;;;;;;;;;;;;:::i;:::-;:30;;;;;;;;;:::i;:::-;1967:11;;1979:10;1967:23;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;;;;;;:::i;:::-;1745:277;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1745:41:2;;-1:-1:-1;;;1745:277:2:i;:::-;1713:309;;-1:-1:-1;1713:309:2;-1:-1:-1;1685:12:2;;1627:406;;;;2063:21;2046:13;:38;2042:109;;2100:16;;;:40;;;;;;;;;;2042:109;2209:17;;;:21;2205:102;;2279:1;2263:17;;2246:35;;;;:16;;;:35;;;;;:50;;;2205:102;2321:41;2332:11;;2345:5;2352:9;;2321:41;;;;;;;;;;:::i;:::-;;;;;;;;2372:49;2404:5;2411:9;;2372:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2372:31:2;;-1:-1:-1;;;2372:49:2:i;:::-;976:1452;;;;;;;;;:::o;2187:156:9:-;2267:16;:14;:16::i;:::-;:30;;;-1:-1:-1;;;;;2267:30:9;2253:10;:44;2245:91;;;;-1:-1:-1;;;2245:91:9;;;;;;;:::i;:::-;;;;;;;;;2187:156::o;1482:197::-;642:45;;1630:43::o;4463:6304::-;4704:7;4713;4732:25;4760:16;:14;:16::i;:::-;4732:44;;4814:1;4794:10;:17;:21;4786:77;;;;-1:-1:-1;;;4786:77:9;;;;;;;:::i;:::-;4888:30;4877:7;:41;;;;;;;;;4873:5840;;;-1:-1:-1;;;;;4942:30:9;;4934:87;;;;-1:-1:-1;;;4934:87:9;;;;;;;:::i;:::-;5035:80;5058:16;5035:80;;;;;;;;;;;;;;;;;:22;:80::i;:::-;5134:21;5129:1039;5173:10;:17;5157:13;:33;5129:1039;;;5227:15;5245:10;5256:13;5245:25;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5307:19:9;;5288:16;5307:19;;;;;;;;;;;;5245:25;;-1:-1:-1;5352:26:9;;;;:40;5344:106;;;;-1:-1:-1;;;5344:106:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;;5510:19:9;;;5560:23;5510:19;;;;;;;;;;;-1:-1:-1;;5532:25:9;;;;:51;;;5510:73;;5635:18;;;5634:25;5831:43;;;5780:45;;;5778:48;5762:64;;;;5761:114;;5983:3;5957:29;;5953:167;;;6044:1;6027:18;;6010:36;;;;:16;;;:36;;;;;:52;;;;5953:167;-1:-1:-1;;;6137:16:9;;;;;5192:15;5129:1039;;;;4873:5840;;;6199:34;6188:7;:45;;;;;;;;;6184:4529;;;-1:-1:-1;;;;;6257:30:9;;6249:91;;;;-1:-1:-1;;;6249:91:9;;;;;;;:::i;:::-;6354:84;6377:16;6354:84;;;;;;;;;;;;;;;;;:22;:84::i;:::-;6457:21;6452:834;6496:10;:17;6480:13;:33;6452:834;;;6550:15;6568:10;6579:13;6568:25;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6630:19:9;;6611:16;6630:19;;;;;;;;;;;;6568:25;;-1:-1:-1;6693:26:9;;;;6832:4;6805:32;;;6797:92;;;;-1:-1:-1;;;6797:92:9;;;;;;;:::i;:::-;6934:16;-1:-1:-1;;;;;6915:35:9;:15;-1:-1:-1;;;;;6915:35:9;;;6907:104;;;;-1:-1:-1;;;6907:104:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;7037:29:9;;7029:98;;;;-1:-1:-1;;;7029:98:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;7190:19:9;;;2622:44;7190:19;;;;;;;;;;7212:59;7213:29;;;;-1:-1:-1;;7246:25:9;;;;7212:59;;7190:81;;6515:15;;6452:834;;6184:4529;7317:33;7306:7;:44;;;;;;;;;7302:3411;;;-1:-1:-1;;;;;7374:30:9;;;7366:97;;;;-1:-1:-1;;;7366:97:9;;;;;;;:::i;:::-;7522:1;7505:18;;-1:-1:-1;;7568:18:9;;;7567:24;7477:25;7605:2940;7649:10;:17;7633:13;:33;7605:2940;;;7707:18;7703:247;;-1:-1:-1;;7794:19:9;;;7851:35;;;;7794:19;7851:16;;:35;;;;;;;-1:-1:-1;7794:19:9;7930:1;;-1:-1:-1;7703:247:9;7967:19;8004:29;8051:33;8193:15;8211:10;8222:13;8211:25;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;8277:19:9;;8258:16;8277:19;;;;;;;;;;;;8211:25;;-1:-1:-1;8326:26:9;;;;8318:108;;;;-1:-1:-1;;;8318:108:9;;;;;;;:::i;:::-;8520:26;;;;8558:4;8520:43;;8512:102;;;;-1:-1:-1;;;8512:102:9;;;;;;;:::i;:::-;8816:2;8794:24;;8776:43;;;;-1:-1:-1;;;;;;;8846:24:9;;;;;;;8842:238;;-1:-1:-1;;;;;;9033:23:9;;:9;:23;;;;;;;;;;;;-1:-1:-1;;8991:66:9;;8992:29;;8991:66;8965:92;;8842:238;-1:-1:-1;;;;;;9108:19:9;;:9;:19;;;;;;;;;;9101:26;9149:52;;;9266:1;9149:52;9247:20;;-1:-1:-1;9337:1:9;9318:16;:20;9342:2;9317:27;9289:55;;7605:2940;;;9409:17;9384:21;:42;9380:943;;9450:23;9476:39;;;:16;;;:39;;;;;;;-1:-1:-1;;;;;;9700:48:9;;;9698:51;9680:69;;;9778:21;;;:50;;9679:150;9912:57;;9380:943;;;10278:25;10261:12;10253:21;;;:50;;10198:25;-1:-1:-1;;;;;;2711:35:9;;10175:48;;10173:51;10157:13;:67;10156:148;10116:188;;9380:943;10344:24;10340:152;;10399:35;;;;:16;;;:35;;;;;10392:42;;;10399:35;-1:-1:-1;10340:152:9;-1:-1:-1;;;;10509:21:9;;;;-1:-1:-1;10509:21:9;7668:15;7605:2940;;;-1:-1:-1;10621:1:9;10595;10575:21;;;:43;:47;;-1:-1:-1;7302:3411:9;;;10653:49;;-1:-1:-1;;;10653:49:9;;;;;;;:::i;7302:3411::-;-1:-1:-1;10730:14:9;;10746:13;;-1:-1:-1;;;;;4463:6304:9:o;10773:871::-;-1:-1:-1;;;;;10865:19:9;;10861:777;;10908:16;;:21;10900:94;;;;-1:-1:-1;;;10900:94:9;;;;;;;:::i;:::-;10861:777;;;11052:1;11033:9;:16;:20;11025:94;;;;-1:-1:-1;;;11025:94:9;;;;;;;:::i;:::-;-1:-1:-1;;;;;11137:22:9;;11154:4;11137:22;11133:134;;11179:73;11202:5;11179:73;;;;;;;;;;;;;;;;;:22;:73::i;:::-;11281:12;11295:18;11317:5;-1:-1:-1;;;;;11317:18:9;11336:9;11317:29;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11280:66;;;;11365:7;11360:268;;11396:12;;:16;11392:222;;11493:5;11479:21;;-1:-1:-1;;;11479:21:9;;;;;;;;:::i;11392:222::-;11547:48;;-1:-1:-1;;;11547:48:9;;;;;;;:::i;11392:222::-;10861:777;;;10773:871;;:::o;11650:261::-;11823:22;;11890:13;11872:16;11864:40;;;;-1:-1:-1;;;11864:40:9;;;;;;;;:::i;5:130:-1:-;72:20;;-1:-1;;;;;25310:54;;26236:35;;26226:2;;26285:1;;26275:12;26226:2;57:78;;;;:::o;1060:166::-;1145:20;;26510:1;26500:12;;26490:2;;26526:1;;26516:12;1233:241;;1337:2;1325:9;1316:7;1312:23;1308:32;1305:2;;;-1:-1;;1343:12;1305:2;1405:53;1450:7;1426:22;1405:53;:::i;:::-;1395:63;1299:175;-1:-1;;;1299:175::o;1481:825::-;;;;;;1700:2;1688:9;1679:7;1675:23;1671:32;1668:2;;;-1:-1;;1706:12;1668:2;1764:17;1751:31;1802:18;;1794:6;1791:30;1788:2;;;-1:-1;;1824:12;1788:2;1952:6;1941:9;1937:22;;;337:3;330:4;322:6;318:17;314:27;304:2;;-1:-1;;345:12;304:2;388:6;375:20;1802:18;407:6;404:30;401:2;;;-1:-1;;437:12;401:2;481:4;532:3;481:4;;516:6;512:17;473:6;498:32;;495:41;492:2;;;-1:-1;;539:12;492:2;481:4;473:6;469:17;1844:125;;;;;2024:53;2069:7;481:4;2049:9;2045:22;2024:53;:::i;:::-;2014:63;;2142:2;2131:9;2127:18;2114:32;2100:46;;1802:18;2158:6;2155:30;2152:2;;;-1:-1;;2188:12;2152:2;2273:6;2262:9;2258:22;;;830:3;330:4;815:6;811:17;807:27;797:2;;-1:-1;;838:12;797:2;881:6;868:20;858:30;;1802:18;900:6;897:30;894:2;;;-1:-1;;930:12;894:2;1025:3;481:4;1005:17;966:6;991:32;;988:41;985:2;;;-1:-1;;1032:12;985:2;1662:644;;;;-1:-1;1662:644;;-1:-1;;962:17;;;;-1:-1;2208:82;;1662:644;-1:-1;1662:644::o;2313:277::-;;2435:2;2423:9;2414:7;2410:23;2406:32;2403:2;;;-1:-1;;2441:12;2403:2;2503:71;2566:7;2542:22;2503:71;:::i;3041:103::-;-1:-1;;;;;25310:54;3102:37;;3096:48::o;3300:637::-;;22831:6;22826:3;22819:19;22868:4;;22863:3;22859:14;3435:82;;3601:21;-1:-1;3628:287;3653:6;3650:1;3647:13;3628:287;;;646:6;633:20;-1:-1;;;;;;26386:5;25009:78;;26362:5;26359:34;26349:2;;-1:-1;;26397:12;26349:2;5116:36;;-1:-1;2747:14;;;;24347:12;;;;3675:1;3668:9;3628:287;;;-1:-1;3921:10;;3422:515;-1:-1;;;;;3422:515::o;5187:297::-;;22831:6;22826:3;22819:19;25607:6;25602:3;22868:4;22863:3;22859:14;25584:30;-1:-1;22868:4;25654:6;22863:3;25645:16;;25638:27;22868:4;-1:-1;;26044:2;5470:6;26024:14;26020:28;22863:3;5439:39;;5432:46;;5287:197;;;;;:::o;5855:148::-;26148:1;26141:5;26138:12;26128:2;;26154:9;26128:2;5932:66;;5926:77::o;13299:271::-;;5652:5;22281:12;5763:52;5808:6;5803:3;5796:4;5789:5;5785:16;5763:52;:::i;:::-;5827:16;;;;;13433:137;-1:-1;;13433:137::o;13577:820::-;13900:2;13914:47;;;13885:18;;;22819:19;;;13577:820;;22868:4;22859:14;;;;;4386:17;;;4377:27;;;4516:21;13577:820;4543:467;4568:6;4565:1;4562:13;4543:467;;;4620:20;13889:9;4624:4;4620:20;;4615:3;4608:33;24671:3;24658:17;-1:-1;;24739:8;24723:14;24719:29;24715:48;24695:18;24691:73;24681:2;;-1:-1;;24768:12;24681:2;24797:33;;23696:12;;;12626:63;12674:14;23670:39;23696:12;24797:33;23670:39;:::i;:::-;12626:63;:::i;:::-;24511:12;;12603:16;24511:12;24467:57;24511:12;12804:16;24467:57;:::i;:::-;12733:88;;12827:79;22868:4;12895:3;12891:14;12877:12;12827:79;:::i;:::-;12995:76;13054:16;13047:5;12995:76;:::i;:::-;12961:110;;;;;13900:2;24511:12;13095:3;13091:14;13084:38;;13137:117;13900:2;12491:3;12487:14;13235:12;13221;13137:117;:::i;:::-;4989:14;;;;4745:124;-1:-1;;;22541:14;;;;4590:1;4583:9;4543:467;;;4547:14;;14156:72;22868:4;14213:9;14209:18;14200:6;14156:72;:::i;:::-;14276:9;14270:4;14266:20;24511:12;14250:9;14246:18;14239:48;14301:86;14382:4;14373:6;14365;14301:86;:::i;:::-;14293:94;13871:526;-1:-1;;;;;;;;;;;13871:526::o;14404:310::-;;14551:2;14572:17;14565:47;6155:5;22281:12;22831:6;14551:2;14540:9;14536:18;22819:19;6249:52;6294:6;22859:14;14540:9;22859:14;14551:2;6275:5;6271:16;6249:52;:::i;:::-;26044:2;26024:14;-1:-1;;26020:28;6313:39;;;;22859:14;6313:39;;14522:192;-1:-1;;14522:192::o;14721:416::-;14921:2;14935:47;;;6589:2;14906:18;;;22819:19;6625:34;22859:14;;;6605:55;6694:30;6680:12;;;6673:52;6744:12;;;14892:245::o;15144:416::-;15344:2;15358:47;;;6995:2;15329:18;;;22819:19;7031:34;22859:14;;;7011:55;7100:8;7086:12;;;7079:30;7128:12;;;15315:245::o;15567:416::-;15767:2;15781:47;;;7379:2;15752:18;;;22819:19;7415:34;22859:14;;;7395:55;7484:4;7470:12;;;7463:26;7508:12;;;15738:245::o;15990:416::-;16190:2;16204:47;;;7759:2;16175:18;;;22819:19;7795:34;22859:14;;;7775:55;7864:13;7850:12;;;7843:35;7897:12;;;16161:245::o;16413:416::-;16613:2;16627:47;;;8148:2;16598:18;;;22819:19;8184:34;22859:14;;;8164:55;8253:25;8239:12;;;8232:47;8298:12;;;16584:245::o;16836:416::-;17036:2;17050:47;;;8549:2;17021:18;;;22819:19;8585:34;22859:14;;;8565:55;8654:9;8640:12;;;8633:31;8683:12;;;17007:245::o;17259:416::-;17459:2;17473:47;;;8934:2;17444:18;;;22819:19;8970:34;22859:14;;;8950:55;9039:14;9025:12;;;9018:36;9073:12;;;17430:245::o;17682:416::-;17882:2;17896:47;;;9324:2;17867:18;;;22819:19;9360:34;22859:14;;;9340:55;9429:18;9415:12;;;9408:40;9467:12;;;17853:245::o;18105:416::-;18305:2;18319:47;;;9718:2;18290:18;;;22819:19;9754:34;22859:14;;;9734:55;9823:31;9809:12;;;9802:53;9874:12;;;18276:245::o;18528:416::-;18728:2;18742:47;;;10125:2;18713:18;;;22819:19;10161:34;22859:14;;;10141:55;10230:16;10216:12;;;10209:38;10266:12;;;18699:245::o;18951:416::-;19151:2;19165:47;;;10517:2;19136:18;;;22819:19;10553:34;22859:14;;;10533:55;10622:23;10608:12;;;10601:45;10665:12;;;19122:245::o;19374:416::-;19574:2;19588:47;;;10916:2;19559:18;;;22819:19;10952:34;22859:14;;;10932:55;11021:26;11007:12;;;11000:48;11067:12;;;19545:245::o;19797:416::-;19997:2;20011:47;;;11318:2;19982:18;;;22819:19;11354:34;22859:14;;;11334:55;11423:24;11409:12;;;11402:46;11467:12;;;19968:245::o;20220:416::-;20420:2;20434:47;;;11718:2;20405:18;;;22819:19;11754:34;22859:14;;;11734:55;11823:17;11809:12;;;11802:39;11860:12;;;20391:245::o;20643:416::-;20843:2;20857:47;;;12111:2;20828:18;;;22819:19;12147:34;22859:14;;;12127:55;12216:26;12202:12;;;12195:48;12262:12;;;20814:245::o;21066:521::-;;;21216:11;21203:25;-1:-1;;21291:8;21275:14;21271:29;21267:48;21247:18;21243:73;21233:2;;-1:-1;;21320:12;21233:2;21347:33;;21401:18;;;-1:-1;21439:18;21428:30;;21425:2;;;-1:-1;;21461:12;21425:2;21306:4;21489:13;;;;-1:-1;21541:17;;21275:14;21521:38;21511:49;;21508:2;;;21573:1;;21563:12;21508:2;21171:416;;;;;:::o;21594:317::-;;21737:11;21724:25;-1:-1;;21812:8;21796:14;21792:29;21788:48;21768:18;21764:73;21754:2;;-1:-1;;21841:12;23724:516;;;23863:3;23850:17;-1:-1;;23931:8;23915:14;23911:29;23907:48;23887:18;23883:73;23873:2;;-1:-1;;23960:12;23873:2;23989:33;;23946:4;24078:16;;;-1:-1;24044:19;;-1:-1;24114:18;24103:30;;24100:2;;;24146:1;;24136:12;24100:2;23946:4;24197:6;24193:17;23915:14;24173:38;24163:8;24159:53;24156:2;;;24225:1;;24215:12;25680:268;25745:1;25752:101;25766:6;25763:1;25760:13;25752:101;;;25833:11;;;25827:18;25814:11;;;25807:39;25788:2;25781:10;25752:101;;;25868:6;25865:1;25862:13;25859:2;;;-1:-1;;25745:1;25915:16;;25908:27;25729:219::o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "981000",
        "executionCost": "1021",
        "totalCost": "982021"
      },
      "external": {
        "diamondCut((address,uint8,bytes4[])[],address,bytes)": "infinite"
      }
    },
    "methodIdentifiers": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": "1f931c1c"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solc_0.7/diamond/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"solc_0.7/diamond/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {    \\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\n    }\\n}\\n\",\"keccak256\":\"0x88482a6de4eb9946da9b577c865264b40574c7f06c8bccadd1a0a5207e4a61da\",\"license\":\"MIT\"},\"solc_0.7/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x19c92fe16028a8e74a5f1914235b3e7f4e5eafbc5fced9fa345cab5cd4644c0c\",\"license\":\"MIT\"},\"solc_0.7/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x8f7751980297b63c26a4cf8d7830ba82befde6a07b6a179115985c8d04d6b3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"solc_0.7/diamond/Diamantaire.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./Diamond.sol\\\";\\n\\ncontract Diamantaire {\\n    event DiamondCreated(Diamond diamond);\\n\\n    function createDiamond(\\n        address owner,\\n        IDiamondCut.FacetCut[] calldata _diamondCut,\\n        bytes calldata data,\\n        bytes32 salt\\n    ) external payable returns (Diamond diamond) {\\n        Diamond.DiamondArgs memory args;\\n        args.owner = address(this);\\n\\n        if (salt != 0x0000000000000000000000000000000000000000000000000000000000000000) {\\n            salt = keccak256(abi.encodePacked(salt, owner));\\n            diamond = new Diamond{value: msg.value, salt: salt}(_diamondCut, args);\\n        } else {\\n            diamond = new Diamond{value: msg.value}(_diamondCut, args);\\n        }\\n        emit DiamondCreated(diamond);\\n\\n        IDiamondCut(address(diamond)).diamondCut(_diamondCut, data.length > 0 ? address(diamond) : address(0), data);\\n        IERC173(address(diamond)).transferOwnership(owner);\\n    }\\n}\\n\"\n    },\n    \"solc_0.7/diamond/interfaces/IDiamondCut.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\n    },\n    \"solc_0.7/diamond/Diamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"./libraries/LibDiamond.sol\\\";\\nimport \\\"./interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"./interfaces/IDiamondCut.sol\\\";\\nimport \\\"./interfaces/IERC173.sol\\\";\\nimport \\\"./interfaces/IERC165.sol\\\";\\n\\ncontract Diamond {\\n    // more arguments are added to this struct\\n    // this avoids stack too deep errors\\n    struct DiamondArgs {\\n        address owner;\\n    }\\n\\n    constructor(IDiamondCut.FacetCut[] memory _diamondCut, DiamondArgs memory _args) payable {\\n        LibDiamond.diamondCut(_diamondCut, address(0), new bytes(0));\\n        LibDiamond.setContractOwner(_args.owner);\\n\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n\\n        // adding ERC165 data\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = address(bytes20(ds.facets[msg.sig]));\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }    \\n}\\n\"\n    },\n    \"solc_0.7/diamond/libraries/LibDiamond.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* This is gas optimized by reducing storage reads and storage writes.\\n* This code is as complex as it is to reduce gas costs.\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // owner of the contract\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n        _;\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(address(bytes20(oldFacet)) == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                // add facet for selector\\n                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);\\n                uint256 selectorInSlotPosition = (_selectorCount % 8) * 32;\\n                // clear selector position in slot and add selector\\n                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    ds.selectorSlots[_selectorCount / 8] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            require(_newFacetAddress != address(0), \\\"LibDiamondCut: Replace facet can't be address(0)\\\");\\n            enforceHasContractCode(_newFacetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(oldFacetAddress != address(this), \\\"LibDiamondCut: Can't replace immutable function\\\");\\n                require(oldFacetAddress != _newFacetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n                require(oldFacetAddress != address(0), \\\"LibDiamondCut: Can't replace function that doesn't exist\\\");\\n                // replace old facet address\\n                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(_newFacetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n            uint256 selectorSlotCount = _selectorCount / 8;\\n            uint256 selectorInSlotIndex = (_selectorCount % 8) - 1;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(address(bytes20(oldFacet)) != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n                    // only useful if immutable functions exist\\n                    require(address(bytes20(oldFacet)) != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex * 32));\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount / 8;\\n                    oldSelectorInSlotPosition = (oldSelectorCount % 8) * 32;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n                selectorInSlotIndex--;\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex + 1;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\n    },\n    \"solc_0.7/diamond/interfaces/IDiamondLoupe.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\n    },\n    \"solc_0.7/diamond/interfaces/IERC173.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\n    },\n    \"solc_0.7/diamond/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"solc_0.7/diamond/facets/DiamondLoupeFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facets_ = new Facet[](ds.selectorCount);\\n        uint8[] memory numFacetSelectors = new uint8[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\n                        facets_[facetIndex].functionSelectors[numFacetSelectors[facetIndex]] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facets_[numFacets].facetAddress = facetAddress_;\\n                facets_[numFacets].functionSelectors = new bytes4[](ds.selectorCount);\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n        // setting the number of facets\\n        assembly {\\n            mstore(facets_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory _facetFunctionSelectors) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numSelectors;\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    _facetFunctionSelectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n        // Set the number of selectors in the array\\n        assembly {\\n            mstore(_facetFunctionSelectors, numSelectors)\\n        }\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = new address[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (uint256 selectorSlotIndex; selectorSlotIndex < 8; selectorSlotIndex++) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex * 32));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop = false;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continueLoop = false;\\n                    continue;\\n                }\\n                facetAddresses_[numFacets] = facetAddress_;\\n                numFacets++;\\n            }\\n        }\\n        // Set the number of facet addresses in the array\\n        assembly {\\n            mstore(facetAddresses_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddress_ = address(bytes20(ds.facets[_functionSelector]));\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\"\n    },\n    \"solc_0.7/diamond/facets/OwnershipFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\nimport \\\"../interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address _newOwner) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.setContractOwner(_newOwner);\\n    }\\n\\n    function owner() external override view returns (address owner_) {\\n        owner_ = LibDiamond.contractOwner();\\n    }\\n}\"\n    },\n    \"solc_0.7/diamond/facets/DiamondCutFacet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {    \\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            // get last selectorSlot\\n            selectorSlot = ds.selectorSlots[selectorCount / 8];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            (selectorCount, selectorSlot) = LibDiamond.addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        if (selectorCount % 8 > 0) {\\n            ds.selectorSlots[selectorCount / 8] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        LibDiamond.initializeDiamondCut(_init, _calldata);\\n    }\\n}\\n\"\n    },\n    \"solc_0.7/diamond/libraries/LibDiamondCut.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of internal diamondCut function.\\n/******************************************************************************/\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamondCut {\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Non-standard internal function version of diamondCut\\n    // This code is almost the same as externalCut, except it is using\\n    // 'FacetCut[] memory _diamondCut' instead of 'FacetCut[] calldata _diamondCut'\\n    // and it DOES issue the DiamondCut event\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes a Solidity error for a two dimensional array.\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            address newFacetAddress = _diamondCut[facetIndex].facetAddress;\\n            // add or replace function\\n            if (newFacetAddress != address(0)) {\\n                uint256 facetAddressPosition = ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition;\\n                // add new facet address if it does not exist\\n                if (facetAddressPosition == 0 && ds.facetFunctionSelectors[newFacetAddress].functionSelectors.length == 0) {\\n                    hasContractCode(newFacetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n                    facetAddressPosition = ds.facetAddresses.length;\\n                    ds.facetAddresses.push(newFacetAddress);\\n                    ds.facetFunctionSelectors[newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n                }\\n                // add or replace selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    bytes4 selector = _diamondCut[facetIndex].functionSelectors[selectorIndex];\\n                    address oldFacet = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                    // add\\n                    if (oldFacet == address(0)) {\\n                        addSelector(newFacetAddress, selector);\\n                    } else {\\n                        // replace\\n                        if (oldFacet != newFacetAddress) {\\n                            removeSelector(selector);\\n                            addSelector(newFacetAddress, selector);\\n                        }\\n                    }\\n                }\\n            } else {\\n                // remove selectors\\n                for (uint256 selectorIndex; selectorIndex < _diamondCut[facetIndex].functionSelectors.length; selectorIndex++) {\\n                    removeSelector(_diamondCut[facetIndex].functionSelectors[selectorIndex]);\\n                }\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, address(0), new bytes(0));\\n    }\\n\\n    function addSelector(address _newFacet, bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length;\\n        ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet;\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition);\\n    }\\n\\n    function removeSelector(bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        address oldFacet = ds.selectorToFacetAndPosition[_selector].facetAddress;\\n        // if function does not exist then do nothing and return\\n        if (oldFacet == address(0)) {\\n            return;\\n        }\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[oldFacet].functionSelectors.length - 1;\\n        bytes4 lastSelector = ds.facetFunctionSelectors[oldFacet].functionSelectors[lastSelectorPosition];\\n        // if not the same then replace _selector with lastSelector\\n        if (lastSelector != _selector) {\\n            ds.facetFunctionSelectors[oldFacet].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[oldFacet].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[oldFacet].facetAddressPosition;\\n            if (oldFacet != lastFacetAddress) {\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[oldFacet];\\n        }\\n    }\\n\\n    function hasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\n    },\n    \"solc_0.7/diamond/libraries/LibDiamondStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // owner of the contract\\n        address contractOwner;\\n        // maps function selector to the facet address and        \\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 2000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
  "solcInputHash": "1c35ae96eec04f819b95dcb93c58bdda"
}